// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Game-specific fields
  leaguePoints  Int       @default(0)
  totalProblems Int       @default(0)
  correctSolved Int       @default(0)
  currentStreak Int       @default(0)
  longestStreak Int       @default(0)
  division      String    @default("League Two")
  weeklyPoints  Int       @default(0)
  joinedAt      DateTime  @default(now())
  lastActive    DateTime  @default(now())
  
  // Game sessions
  gameSessions  GameSession[]
  achievements  UserAchievement[]
  
  // Tournament relations
  hostedTournaments    TournamentRoom[]        @relation("TournamentHost")
  tournamentParticipations TournamentParticipant[] @relation("TournamentParticipant")
  
  // 1v1 Duel relations
  hostedDuels     DuelRoom[] @relation("DuelHost")
  opponentDuels   DuelRoom[] @relation("DuelOpponent")
  wonDuels        DuelRoom[] @relation("DuelWinner")
  duelQueue       DuelQueue?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GameSession {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mode             String   // "rush", "1v1", "tournament", "league", "practice"
  problemsSolved   Int      @default(0)
  correctAnswers   Int      @default(0)
  pointsEarned     Int      @default(0)
  timeSpent        Int      @default(0) // in seconds
  accuracy         Float    @default(0)
  maxStreak        Int      @default(0)
  difficulty       String   @default("Basic")
  createdAt        DateTime @default(now())
  completedAt      DateTime?
}

model Achievement {
  id          String @id @default(cuid())
  key         String @unique // e.g., "first_solve", "streak_10"
  name        String
  description String
  icon        String
  category    String // e.g., "progress", "streak", "speed"
  requirement Int?   // For numeric achievements
  
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  earnedAt      DateTime    @default(now())
  progress      Int?        // For tracking progress towards achievement
  
  @@unique([userId, achievementId])
}

model Leaderboard {
  id           String   @id @default(cuid())
  userId       String   @unique
  globalRank   Int      @default(0)
  weeklyRank   Int      @default(0)
  monthlyRank  Int      @default(0)
  lastUpdated  DateTime @default(now())
}

model TournamentRoom {
  id          String   @id @default(cuid())
  code        String   @unique // 6-digit code
  hostId      String
  host        User     @relation("TournamentHost", fields: [hostId], references: [id], onDelete: Cascade)
  status      TournamentStatus @default(WAITING)
  maxPlayers  Int      @default(8)
  createdAt   DateTime @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  
  participants TournamentParticipant[]
  matches      TournamentMatch[]
}

model TournamentParticipant {
  id         String         @id @default(cuid())
  roomId     String
  room       TournamentRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId     String
  user       User           @relation("TournamentParticipant", fields: [userId], references: [id], onDelete: Cascade)
  joinedAt   DateTime       @default(now())
  score      Int            @default(0)
  wins       Int            @default(0)
  losses     Int            @default(0)
  rank       Int?
  
  playerMatches  TournamentMatch[] @relation("Player1Matches")
  opponentMatches TournamentMatch[] @relation("Player2Matches")
  
  @@unique([roomId, userId])
}

model TournamentMatch {
  id        String         @id @default(cuid())
  roomId    String
  room      TournamentRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  player1Id String
  player1   TournamentParticipant @relation("Player1Matches", fields: [player1Id], references: [id], onDelete: Cascade)
  player2Id String
  player2   TournamentParticipant @relation("Player2Matches", fields: [player2Id], references: [id], onDelete: Cascade)
  
  status      MatchStatus @default(PENDING)
  startedAt   DateTime?
  completedAt DateTime?
  winnerId    String?
  player1Score Int @default(0)
  player2Score Int @default(0)
  
  round       Int // Round number in round-robin
}

enum TournamentStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MatchStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

// 1v1 Duel System
model DuelRoom {
  id          String   @id @default(cuid())
  code        String   @unique
  status      DuelStatus @default(WAITING)
  timeControl Int      @default(180) // seconds (3 minutes default)
  difficulty  String   @default("Mixed")
  questionsToWin Int   @default(5)
  
  hostId      String
  host        User     @relation("DuelHost", fields: [hostId], references: [id], onDelete: Cascade)
  
  opponentId  String?
  opponent    User?    @relation("DuelOpponent", fields: [opponentId], references: [id], onDelete: Cascade)
  
  winnerId    String?
  winner      User?    @relation("DuelWinner", fields: [winnerId], references: [id], onDelete: Cascade)
  
  currentQuestionId String?
  hostScore    Int     @default(0)
  opponentScore Int    @default(0)
  hostTimeRemaining Int?
  opponentTimeRemaining Int?
  
  createdAt   DateTime @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  
  // Game state for real-time updates
  gameState   Json?
  
  @@map("duel_rooms")
}

model DuelQueue {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeControl Int      @default(180)
  difficulty  String   @default("Mixed")
  createdAt   DateTime @default(now())
  
  @@map("duel_queue")
}

enum DuelStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
  ABANDONED
}